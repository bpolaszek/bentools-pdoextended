<?php
/** 
 * ArrayCache.php
 * Generated by PhpStorm - 11/2014
 * Project PDOExtended
 * @author benoit.polaszek
**/

namespace BenTools\PDOExtended\CacheHandler;


class ArrayCache implements CacheHandlerInterface {

    const       DEFAULT_TTL =   0;
    protected   $storage    =   array();

    /**
     * Stores data
     * @param $key
     * @param $value
     * @param int $ttl
     * @return $value
     */
    public function store($key, $value, $ttl = self::DEFAULT_TTL) {
        $this->storage[$key]      =   array('value' => $value, 'expires' => ($ttl) ? time() + $ttl : 0);
        return $value;
    }

    /**
     * Checks if data exists in cache
     * @param $key
     * @return bool|string[]
     */
    public function exists($key) {
        if (!array_key_exists($key, $this->storage))
            return false;

        if ($this->storage[$key]['expires'] > 0 && time() > $this->storage[$key]['expires'])
            return false;

        return true;
    }

    /**
     * Retrieve data from cache
     * @param $key
     * @return mixed
     */
    public function fetch($key) {
        return $this->storage[$key]['value'];
    }

    /**
     * Deletes data from cache
     * @param $key
     * @return bool|string[]
     */
    public function delete($key) {
        if ($this->exists($key))
            unset($this->storage[$key]);
    }

    /**
     * Returns a string from different params
     * @param $input
     * @return string
     */
    public function key($input) {
        return md5(json_encode(func_get_args()));
    }

    /**
     * Clear the cache.
     */
    public function clear() {
        $this->storage  =   array();
    }

}